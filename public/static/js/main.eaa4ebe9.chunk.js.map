{"version":3,"sources":["services/PokemonService.js","components/PokemonDashboard.js","App.js","serviceWorker.js","index.js"],"names":["PokemonService","getTypeColor","type","split","colors","normal","fire","fighting","water","flying","grass","poison","electric","bug","ground","psychic","rock","ghost","ice","dragon","dark","fairy","steel","getPokemonList","offset","limit","fetch","then","response","json","getPokemonByName","name","theme","global","hover","background","opacity","layer","capitalize","str","charAt","toUpperCase","slice","pokemonService","PokemonDashboard","whoIsThatPokemonImage","useState","pokemonList","currentOffset","pokemonDetail","state","setState","pokemonDetailOpen","setPokemonDetailOpen","closeDetail","updateList","list","PokemonGridItem","pokemon","Card","onClick","hoverIndicator","key","id","pad","bottom","Stack","anchor","CardBody","horizontal","top","height","Text","margin","weight","size","Box","animation","Image","fit","a11yTitle","src","image","CardHeader","vertical","width","justify","Heading","level","wordBreak","abilities","join","GridControls","align","gap","direction","Button","icon","FormPreviousLink","disabled","primary","FormNextLink","length","PokemonDetailLayer","n","z","open","Layer","position","onClickOutside","onEsc","round","color","Array","map","Grommet","backgroundActive","active","button","border","label","as","description","evolutions","useEffect","full","Grid","rows","columns","value","brand","font","family","AppBar","props","tag","left","right","elevation","style","zIndex","App","themeMode","ResponsiveContext","Consumer","fill","flex","overflow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaa4ebe9.chunk.js","sourcesContent":["const PokemonService = () => {\n\n    const getPokemonList = (offset = 0, limit = 20)=> {\n        return fetch(`/api/pokemon?offset=${offset}&limit=${limit}`)\n            .then(response => response.json())\n    }\n\n    const getPokemonByName = (name) => {\n        return fetch(`/api/pokemon/${name}`)\n            .then(response => response.json())\n    }\n    const getTypeColor = (type) => {\n        let split = type.split('/')[0];\n        const colors = {\n            normal: '#CACAAE',\n            fire: '#FB6C6C',\n            fighting: '#C03028',\n            water: '#76BDFE',\n            flying: '#A890F0',\n            grass: '#48d0b0',\n            poison: '#9569A5',\n            electric: '#FFD86F',\n            bug: '#A8B820',\n            ground: '#ECD9A4',\n            psychic: '#F86390',\n            rock: '#B8A038',\n            ghost: '#A99AC1',\n            ice: '#C1E7E7',\n            dragon: '#A987FA',\n            dark: '#A99A91',\n            fairy: '#F4C1CD',\n            steel: '#D4D4E2'\n        };\n        return colors[split] ? colors[split] : 'white';\n    }\n    return {\n        getTypeColor,\n        getPokemonList,\n        getPokemonByName\n    }\n}\n\nexport default PokemonService;","import React, {useEffect, useState} from 'react';\nimport {Box, Button, Card, CardBody, CardHeader, Grid, Grommet, Heading, Image, Layer, Stack, Text} from 'grommet';\nimport PokemonService from \"../services/PokemonService\";\nimport {FormNextLink, FormPreviousLink} from \"grommet-icons\";\n\nconst theme = {\n    global: {\n        hover: {\n            background: {\n                opacity: 'strong'\n            }\n        },\n    },\n    layer: {\n        background: 'none'\n    },\n};\n\nconst capitalize = (str) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst pad = (n, width, z) => {\n    z = z || '0';\n    n = n + '';\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n}\nconst pokemonService = PokemonService();\nconst PokemonDashboard = () => {\n    const whoIsThatPokemonImage = 'https://elvortex.com/wp-content/uploads/2018/03/HddtBOT-1068x601.png';\n    const [state, setState] = useState({\n        pokemonList: [],\n        currentOffset: 0,\n        pokemonDetail: null,\n        limit: 100\n    });\n    const [pokemonDetailOpen, setPokemonDetailOpen] = useState(false);\n    const closeDetail = () => setPokemonDetailOpen(false);\n\n    const updateList = (offset, limit) => {\n        pokemonService.getPokemonList(offset, limit)\n            .then(list => {\n                setState({\n                    ...state,\n                    pokemonList: list,\n                    currentOffset: offset\n                })\n            })\n    };\n    const nextPage = () => {\n        updateList(state.currentOffset + state.limit, state.limit)\n    };\n    const prevPage = () => {\n        updateList(state.currentOffset - state.limit, state.limit)\n    };\n\n    const PokemonGridItem = ({pokemon}) => {\n        return <Card\n            onClick={() => {\n                pokemonService.getPokemonByName(pokemon.name)\n                    .then(pokemon => setState({...state, pokemonDetail: pokemon}))\n                    .then(() => setPokemonDetailOpen(true))\n            }}\n            hoverIndicator={true}\n            key={pokemon.id}\n            pad={{bottom:'xlarge'}}\n            background={`linear-gradient(102.77deg, ${pokemonService.getTypeColor(pokemon.type)} -9.18%, #FFF 250.09%)`}\n        >\n            <Stack anchor=\"bottom-left\">\n                <CardBody pad={{horizontal: 'small', bottom: 'large', top: 'none'}} height='small'>\n                    <Text margin={{top:\"small\"}} weight='bold' size='large'>{pokemon.id}</Text>\n                    <Box animation='fadeIn'>\n                        <Image\n                            fit=\"contain\"\n                            a11yTitle=\"Official Artwork\"\n                            src={pokemon.image ? pokemon.image : whoIsThatPokemonImage}\n                        />\n                    </Box>\n                </CardBody>\n                <CardHeader\n                    pad={{horizontal: 'small', vertical: 'small'}}\n                    background={`${pokemonService.getTypeColor(pokemon.type)}80`}\n                    width=\"medium\"\n                    justify=\"start\"\n                >\n                    <Box>\n                        <Heading level='3' margin='none'>\n                            {capitalize(pokemon.name)}\n                        </Heading>\n                        <Text size=\"xsmall\"><b>Weight: </b>{pokemon.weight}</Text>\n                        <Text size=\"xsmall\"><b>Type: </b>{pokemon.type}</Text>\n                        <Text size=\"xsmall\"\n                              wordBreak={\"break-all\"}><b>Abilities: </b>{pokemon.abilities.join(', ')}</Text>\n                    </Box>\n                </CardHeader>\n            </Stack>\n        </Card>\n    }\n\n    const GridControls = () => {\n        return <Box align=\"center\" pad={{vertical: 'small'}} gap='small'>\n            <Box direction=\"row\" gap='medium' pad={{vertical: 'small'}}>\n                <Button icon={<FormPreviousLink/>} onClick={() => prevPage()} disabled={state.currentOffset === 0}\n                        primary/>\n                <Button icon={<FormNextLink/>} onClick={() => nextPage()}\n                        disabled={state.pokemonList.length < state.limit} primary/>\n            </Box>\n\n        </Box>\n    }\n\n    const PokemonDetailLayer = ({pokemonDetail, open}) => {\n        const buttonTheme = (backgroundActive) => {\n            return {\n                global: {\n                    active: {\n                        background: {\n                            color: backgroundActive,\n                            opacity: 'strong'\n                        },\n                    }\n                },\n                button:{\n                    border:{\n                        color:'white'\n                    }\n                }\n            }\n        }\n        return open && pokemonDetail && <Layer position=\"center\" onClickOutside={closeDetail} onEsc={closeDetail} >\n            <Box\n                pad={{bottom:'none', horizontal:'none', top:'large'}}\n                gap=\"small\"\n                round={true}\n                width=\"large\"\n                height='large'\n                background={`linear-gradient(102.77deg, ${pokemonService.getTypeColor(pokemonDetail.type)} -9.18%, #FFF 250.09%)`}\n            >\n                <Heading level='1' margin={{horizontal:'large', vertical:'none'}} color='white'>\n                    {capitalize(pokemonDetail.name)} #{pad(pokemonDetail.id, 4)}\n                </Heading>\n                <Box direction='row' margin={{horizontal:'large', vertical:'none'}} gap='small'>\n                    {pokemonDetail.type.split('/').map(type=>\n                        <Grommet theme={buttonTheme(pokemonService.getTypeColor(type))}>\n                            <Button\n                                primary\n                                active\n                                label={capitalize(type)}\n                            />\n                        </Grommet>\n                    )}\n                </Box>\n                <Image\n                    fit=\"contain\"\n                    a11yTitle=\"Official Artwork\"\n                    src={pokemonDetail.image ? pokemonDetail.image : whoIsThatPokemonImage}\n                />\n                <Box\n                    as=\"footer\"\n                    gap=\"small\"\n                    direction=\"column\"\n                    align=\"start\"\n                    justify=\"end\"\n                    background='white'\n                    pad='large'\n                    round={true}\n                >\n                    <Text size='large'>{pokemonDetail.description}</Text>\n                    <Text size=\"medium\"><b>Weight: </b>{pokemonDetail.weight}</Text>\n                    <Text size=\"medium\"\n                          wordBreak={\"break-all\"}><b>Abilities: </b>{pokemonDetail.abilities.map(capitalize).join(', ')}\n                    </Text>\n                    {pokemonDetail.evolutions.length>0 &&\n                    <Text size=\"medium\"\n                          wordBreak={\"break-all\"}><b>Evolves to: </b>{pokemonDetail.evolutions.map(capitalize).join(', ')}\n                    </Text>\n                    }\n\n                </Box>\n            </Box>\n        </Layer>\n    }\n    useEffect(() => updateList(state.currentOffset, state.limit), [])\n    return <Grommet theme={theme} full>\n        <Box pad={{horizontal: 'medium', vertical: 'small'}}>\n            <GridControls/>\n            {/* Responsive Grid */}\n            <Grid gap=\"medium\" rows=\"small\" columns='small'>\n                {state.pokemonList.map(value => (<PokemonGridItem key={value.id} pokemon={value}/>))}\n            </Grid>\n            <GridControls/>\n        </Box>\n        <PokemonDetailLayer open={pokemonDetailOpen} pokemonDetail={state.pokemonDetail}/>\n    </Grommet>\n}\n\nexport default PokemonDashboard;","import React from 'react';\nimport {Box, Grommet, Heading, ResponsiveContext} from 'grommet';\nimport PokemonDashboard from \"./components/PokemonDashboard\";\n\nconst theme = {\n    global: {\n        colors: {\n            brand: '#e9d9d9',\n        },\n        font: {\n            family: 'Roboto',\n            size: '18px',\n            height: '20px',\n        },\n    },\n};\n\nconst AppBar = props => (\n    <Box\n        tag='header'\n        direction='row'\n        align='center'\n        justify='between'\n        background='brand'\n        pad={{left: 'medium', right: 'small', vertical: 'small'}}\n        elevation='medium'\n        style={{zIndex: '1'}}\n        {...props}\n    />\n);\n\nfunction App() {\n    return (\n        <Grommet theme={theme} themeMode=\"dark\" full>\n            <ResponsiveContext.Consumer>\n                {size => (\n                    <Box fill>\n                        <AppBar>\n                            <Heading level='3' margin='none'>Awesome PokeDex!</Heading>\n                        </AppBar>\n                        <Box direction='row' flex overflow={{horizontal: 'hidden'}} background=\"url(https://storage.googleapis.com/pokedexbucket/background.jpg)\">\n                            <Box flex align='center' justify='center'>\n                                <PokemonDashboard/>\n                            </Box>\n                        </Box>\n                    </Box>\n                )}\n            </ResponsiveContext.Consumer>\n        </Grommet>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}